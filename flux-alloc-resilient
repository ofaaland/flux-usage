#!/usr/bin/python3

import math
import argparse
import sys
import flux
import subprocess

"""
Nodes the user wants
app = nodes user needs for their app to run
spare = spare nodes to allow re-launching after job failure

Infrastructure
routers = TBON (tree-based overlay network) router nodes (if they die, allocation dies)
fanout = branching factor of TBON, determines number of router nodes
"""

# this math is not quite right, but close enough for now
def total_needed_nodes(app, spare, fanout=2):
    if fanout >= (app + spare) or fanout == 0:
        routers = 1
    else:
        routers = math.floor( (app + spare -1) / (fanout - 1) )
        routers = max(routers, 1)

    return routers + spare + app

"""
apps = [1,3,5,5,100,200,700]
spares = [1,2,3]
fanouts = [0,2,128,256]

for want in apps:
    for sp in spares:
        for f in fanouts:
            total_needed = total_needed_nodes(want, sp, f)
            router = total_needed - want - sp
            print(f'needed {want+sp} fanout {f} router {router}')
"""

def do_calc_size(arg):
    try:
        fanout = int(arg.fanout)
    except ValueError:
        print(f'error: --fanout ({arg.fanout}) must be an integer')
        sys.exit(1)

    try:
        app = int(arg.app)
    except ValueError:
        print(f'error: --app ({arg.app}) must be an integer')
        sys.exit(1)

    try:
        spare = int(arg.spare)
    except ValueError:
        print(f'error: --spare ({arg.spare}) must be an integer')
        sys.exit(1)

    total_needed = total_needed_nodes(app, spare, fanout)
    print(f'request {total_needed} nodes by providing flux mini arguments\n\t-N{total_needed} --broker-opts=-Stbon.topo=kary:{fanout}')


def do_exclude_list(arg):
    h = flux.Flux()
    # get critical ranks and translate that to host names
    # crit_ranks = subprocess.getoutput(['flux', 'getattr', 'broker.critical-ranks'])
    crit_ranks = h.attr_get('broker.critical-ranks')
    crit_hosts = subprocess.getoutput(f'flux overlay lookup {crit_ranks}')
    # exclude nodes with
    # --requires=-host:HOSTLIST
    print(f'run application on non-critical nodes by providing flux mini argument\n\t--requires=-host:{crit_hosts}')

parser = argparse.ArgumentParser(
    description = 'Helper for resilient flux allocations')
subparsers = parser.add_subparsers(help='sub-command help')

# calc_size subcommand
parser_calc = subparsers.add_parser('calc_size', help='calculate allocation size including flux redundancy')
parser_calc.add_argument('-a', '--app', required=True, help='count of nodes app needs')
parser_calc.add_argument('-s', '--spare', default=2, help='count of spare nodes for re-running after node fail')
parser_calc.add_argument('-f', '--fanout', default=256, help='flux overlay net fanout')
parser_calc.set_defaults(func=do_calc_size)

# exclude_list subcommand
parser_exclude = subparsers.add_parser('exclude_list', help='syntax to avoid running on flux-critical nodes')
parser_exclude.set_defaults(func=do_exclude_list)

args = parser.parse_args()

if hasattr(args, 'func'):
    args.func(args)
else:
    print('error: provide one of the provided subcommands\n')
    parser.parse_args(['-h'])
